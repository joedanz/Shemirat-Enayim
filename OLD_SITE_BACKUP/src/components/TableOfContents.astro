---
interface TocItem {
	id: string;
	text: string;
	level: number;
}

interface Props {
	items: TocItem[];
	title?: string;
	class?: string;
}

const {
	items,
	title = 'On This Page',
	class: className = ''
} = Astro.props;
---

{items.length > 0 && (
	<nav aria-label="Table of contents" class:list={['toc', className]}>
		<h3 class="toc-title">{title}</h3>
		<ul class="toc-list">
			{items.map((item) => (
				<li class:list={[`toc-level-${item.level}`]}>
					<a href={`#${item.id}`}>{item.text}</a>
				</li>
			))}
		</ul>
	</nav>
)}

<style>
	.toc {
		background-color: var(--color-gray-50);
		border: 1px solid var(--color-gray-200);
		border-radius: var(--radius-lg);
		padding: var(--space-6);
		position: sticky;
		top: calc(var(--space-20));
	}

	.toc-title {
		font-size: var(--text-lg);
		font-weight: 600;
		color: var(--color-gray-900);
		margin-bottom: var(--space-4);
	}

	.toc-list {
		list-style: none;
		padding: 0;
		margin: 0;
	}

	.toc-list li {
		margin-bottom: var(--space-2);
	}

	.toc-list a {
		color: var(--color-gray-700);
		text-decoration: none;
		font-size: var(--text-sm);
		display: block;
		padding: var(--space-2) 0;
		transition: all var(--transition-base);
		border-left: 2px solid transparent;
		padding-left: var(--space-3);
	}

	.toc-list a:hover {
		color: var(--color-primary-600);
		border-left-color: var(--color-primary-600);
		padding-left: var(--space-4);
	}

	/* Indent nested levels */
	.toc-level-3 a {
		padding-left: var(--space-6);
	}

	.toc-level-3 a:hover {
		padding-left: calc(var(--space-6) + var(--space-1));
	}

	/* Active state (requires JS to toggle) */
	.toc-list a.active {
		color: var(--color-primary-600);
		font-weight: 600;
		border-left-color: var(--color-primary-600);
	}

	/* Mobile: hide by default */
	@media (max-width: 1023px) {
		.toc {
			display: none;
		}
	}
</style>

<script>
	// Highlight current section on scroll
	document.addEventListener('DOMContentLoaded', () => {
		const toc = document.querySelector('.toc');
		if (!toc) return;

		const links = toc.querySelectorAll<HTMLAnchorElement>('a[href^="#"]');
		const sections = Array.from(links).map(link => {
			const id = link.getAttribute('href')?.slice(1);
			return id ? document.getElementById(id) : null;
		}).filter(Boolean) as HTMLElement[];

		if (sections.length === 0) return;

		const observer = new IntersectionObserver(
			(entries) => {
				entries.forEach((entry) => {
					const id = entry.target.getAttribute('id');
					const link = toc.querySelector(`a[href="#${id}"]`);

					if (entry.isIntersecting) {
						// Remove active class from all links
						links.forEach(l => l.classList.remove('active'));
						// Add active class to current link
						if (link) {
							link.classList.add('active');
						}
					}
				});
			},
			{
				rootMargin: '-100px 0px -66%',
				threshold: 0
			}
		);

		sections.forEach((section) => {
			observer.observe(section);
		});
	});
</script>
