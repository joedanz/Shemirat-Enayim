---
import SearchBar from './SearchBar.astro';
import ThemeToggle from './ThemeToggle.astro';

interface Props {
	currentPath?: string;
}

const { currentPath = '/' } = Astro.props;

interface NavItem {
	label: string;
	href: string;
	submenu?: { label: string; href: string }[];
}

const navItems: NavItem[] = [
	{ label: 'Parents', href: '/parents' },
	{ label: 'Organizations', href: '/leaders' },
	{ label: 'Individuals', href: '/individuals' },
	{
		label: 'Methods',
		href: '/methods',
		submenu: [
			{ label: 'Network-Level', href: '/methods#network' },
			{ label: 'Device Controls', href: '/methods#devices' },
			{ label: 'Software Solutions', href: '/methods#software' }
		]
	},
	{
		label: 'Resources',
		href: '/resources',
		submenu: [
			{ label: 'Setup Guides', href: '/resources#guides' },
			{ label: 'Recommended Tools', href: '/resources#tools' },
			{ label: 'Glossary', href: '/resources#glossary' }
		]
	}
];

function isActive(href: string) {
	return currentPath === href || currentPath.startsWith(href + '/');
}
---

<header>
	<div class="container">
		<div class="header-content">
			<a href="/" class="logo">
				<span class="logo-text">Shemirat Enayim</span>
				<span class="logo-tagline">Protection for the Eyes</span>
			</a>

			<nav class="desktop-nav" aria-label="Main navigation">
				<ul>
					{navItems.map((item) => (
						<li class={item.submenu ? 'has-submenu' : ''}>
							<a
								href={item.href}
								class:list={['nav-link', { active: isActive(item.href) }]}
								aria-current={isActive(item.href) ? 'page' : undefined}
								aria-haspopup={item.submenu ? 'true' : undefined}
								aria-expanded={item.submenu ? 'false' : undefined}
							>
								{item.label}
								{item.submenu && (
									<svg class="dropdown-icon" width="16" height="16" viewBox="0 0 16 16" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
										<polyline points="4 6 8 10 12 6"></polyline>
									</svg>
								)}
							</a>
							{item.submenu && (
								<ul class="submenu">
									{item.submenu.map((subitem) => (
										<li>
											<a href={subitem.href} class="submenu-link">
												{subitem.label}
											</a>
										</li>
									))}
								</ul>
							)}
						</li>
					))}
				</ul>
			</nav>

			<div class="header-actions">
				<ThemeToggle class="header-theme-toggle" />
				<SearchBar class="header-search" />
			</div>

			<button class="mobile-menu-button" aria-label="Open menu" aria-expanded="false">
				<svg width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
					<line x1="3" y1="12" x2="21" y2="12"></line>
					<line x1="3" y1="6" x2="21" y2="6"></line>
					<line x1="3" y1="18" x2="21" y2="18"></line>
				</svg>
			</button>
		</div>
	</div>

	<!-- Mobile menu -->
	<nav class="mobile-nav" aria-label="Mobile navigation" hidden>
		<ul>
			{navItems.map((item) => (
				<li class={item.submenu ? 'has-submenu' : ''}>
					<a
						href={item.href}
						class:list={['nav-link', { active: isActive(item.href) }]}
						aria-current={isActive(item.href) ? 'page' : undefined}
					>
						{item.label}
					</a>
					{item.submenu && (
						<>
							<button
								class="mobile-submenu-toggle"
								aria-label={`Toggle ${item.label} submenu`}
								aria-expanded="false"
							>
								<svg width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2">
									<polyline points="6 8 10 12 14 8"></polyline>
								</svg>
							</button>
							<ul class="mobile-submenu" hidden>
								{item.submenu.map((subitem) => (
									<li>
										<a href={subitem.href} class="submenu-link">
											{subitem.label}
										</a>
									</li>
								))}
							</ul>
						</>
					)}
				</li>
			))}
		</ul>
	</nav>
</header>

<style>
	header {
		background-color: white;
		border-bottom: 1px solid var(--color-gray-200);
		position: sticky;
		top: 0;
		z-index: var(--z-sticky);
		box-shadow: var(--shadow-sm);
	}

	.header-content {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: var(--space-4) 0;
		gap: var(--space-6);
	}

	.logo {
		display: flex;
		flex-direction: column;
		text-decoration: none;
		color: var(--color-gray-900);
		transition: opacity var(--transition-base);
	}

	.logo:hover {
		opacity: 0.8;
		text-decoration: none;
	}

	.logo-text {
		font-size: var(--text-xl);
		font-weight: 700;
		line-height: var(--leading-tight);
		color: var(--color-primary-600);
	}

	.logo-tagline {
		font-size: var(--text-xs);
		color: var(--color-gray-600);
		font-style: italic;
	}

	/* Desktop Navigation */
	.desktop-nav {
		display: none;
	}

	@media (min-width: 768px) {
		.desktop-nav {
			display: block;
			flex: 1;
		}
	}

	/* Header Search */
	.header-actions {
		display: flex;
		align-items: center;
		gap: var(--space-3);
	}

	.header-theme-toggle {
		display: none;
	}

	.header-search {
		display: none;
	}

	@media (min-width: 768px) {
		.header-theme-toggle {
			display: flex;
		}

		.header-search {
			display: block;
		}
	}

	.desktop-nav ul {
		display: flex;
		list-style: none;
		padding: 0;
		margin: 0;
		gap: var(--space-2);
		justify-content: flex-end;
	}

	.desktop-nav li {
		margin: 0;
		position: relative;
	}

	.nav-link {
		display: flex;
		align-items: center;
		gap: var(--space-1);
		padding: var(--space-2) var(--space-4);
		font-size: var(--text-base);
		font-weight: 500;
		color: var(--color-gray-700);
		text-decoration: none;
		border-radius: var(--radius-md);
		transition: all var(--transition-base);
	}

	.nav-link:hover {
		color: var(--color-primary-600);
		background-color: var(--color-primary-50);
		text-decoration: none;
	}

	.nav-link.active {
		color: var(--color-primary-600);
		background-color: var(--color-primary-100);
		font-weight: 600;
	}

	.dropdown-icon {
		transition: transform var(--transition-base);
	}

	.has-submenu[aria-expanded="true"] .dropdown-icon {
		transform: rotate(180deg);
	}

	/* Dropdown Submenu */
	.submenu {
		display: none;
		position: absolute;
		top: 100%;
		left: 0;
		min-width: 200px;
		background-color: white;
		border: 1px solid var(--color-gray-200);
		border-radius: var(--radius-md);
		box-shadow: var(--shadow-lg);
		list-style: none;
		padding: var(--space-2);
		margin: var(--space-1) 0 0;
		z-index: var(--z-dropdown);
	}

	.has-submenu:hover .submenu,
	.has-submenu:focus-within .submenu {
		display: block;
	}

	.submenu li {
		margin: 0;
	}

	.submenu-link {
		display: block;
		padding: var(--space-2) var(--space-3);
		color: var(--color-gray-700);
		text-decoration: none;
		border-radius: var(--radius-base);
		font-size: var(--text-sm);
		transition: all var(--transition-base);
	}

	.submenu-link:hover {
		background-color: var(--color-primary-50);
		color: var(--color-primary-600);
		text-decoration: none;
	}

	/* Mobile Menu Button */
	.mobile-menu-button {
		display: flex;
		align-items: center;
		justify-content: center;
		padding: var(--space-2);
		background: none;
		border: none;
		color: var(--color-gray-700);
		cursor: pointer;
		border-radius: var(--radius-md);
		transition: all var(--transition-base);
	}

	.mobile-menu-button:hover {
		background-color: var(--color-gray-100);
		color: var(--color-primary-600);
	}

	.mobile-menu-button:focus-visible {
		outline: 2px solid var(--color-primary-500);
		outline-offset: 2px;
	}

	@media (min-width: 768px) {
		.mobile-menu-button {
			display: none;
		}
	}

	/* Mobile Navigation */
	.mobile-nav {
		display: block;
		border-top: 1px solid var(--color-gray-200);
		padding: var(--space-4) 0;
	}

	.mobile-nav[hidden] {
		display: none;
	}

	@media (min-width: 768px) {
		.mobile-nav {
			display: none !important;
		}
	}

	.mobile-nav ul {
		list-style: none;
		padding: 0;
		margin: 0;
		display: flex;
		flex-direction: column;
		gap: var(--space-1);
	}

	.mobile-nav li {
		margin: 0;
	}

	.mobile-nav .nav-link {
		padding: var(--space-3) var(--space-4);
		font-size: var(--text-lg);
	}

	.mobile-nav .has-submenu {
		position: relative;
	}

	.mobile-submenu-toggle {
		position: absolute;
		right: var(--space-4);
		top: 50%;
		transform: translateY(-50%);
		background: none;
		border: none;
		padding: var(--space-2);
		color: var(--color-gray-600);
		cursor: pointer;
		border-radius: var(--radius-base);
		transition: all var(--transition-base);
	}

	.mobile-submenu-toggle:hover {
		background-color: var(--color-gray-100);
		color: var(--color-primary-600);
	}

	.mobile-submenu-toggle svg {
		transition: transform var(--transition-base);
	}

	.mobile-submenu-toggle[aria-expanded="true"] svg {
		transform: rotate(180deg);
	}

	.mobile-submenu {
		list-style: none;
		padding: 0 0 0 var(--space-8);
		margin: var(--space-2) 0;
		background-color: var(--color-gray-50);
		border-radius: var(--radius-md);
	}

	.mobile-submenu[hidden] {
		display: none;
	}

	.mobile-submenu li {
		margin: 0;
	}

	.mobile-submenu .submenu-link {
		display: block;
		padding: var(--space-3) var(--space-4);
		color: var(--color-gray-700);
		text-decoration: none;
		font-size: var(--text-base);
		transition: all var(--transition-base);
	}

	.mobile-submenu .submenu-link:hover {
		background-color: var(--color-primary-50);
		color: var(--color-primary-600);
		text-decoration: none;
	}
</style>

<script>
	document.addEventListener('DOMContentLoaded', () => {
		// Mobile menu toggle
		const button = document.querySelector('.mobile-menu-button');
		const mobileNav = document.querySelector('.mobile-nav');

		if (button && mobileNav) {
			button.addEventListener('click', () => {
				const isExpanded = button.getAttribute('aria-expanded') === 'true';
				button.setAttribute('aria-expanded', String(!isExpanded));
				mobileNav.hidden = isExpanded;
			});
		}

		// Mobile submenu toggles
		const submenuToggles = document.querySelectorAll('.mobile-submenu-toggle');
		submenuToggles.forEach((toggle) => {
			toggle.addEventListener('click', () => {
				const isExpanded = toggle.getAttribute('aria-expanded') === 'true';
				toggle.setAttribute('aria-expanded', String(!isExpanded));

				const submenu = toggle.nextElementSibling as HTMLElement;
				if (submenu && submenu.classList.contains('mobile-submenu')) {
					submenu.hidden = isExpanded;
				}
			});
		});
	});
</script>
