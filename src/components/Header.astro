---
import SearchBar from './SearchBar.astro';
import ThemeToggle from './ThemeToggle.astro';

interface Props {
	currentPath?: string;
}

const { currentPath = '/' } = Astro.props;

interface NavItem {
	label: string;
	href: string;
	submenu?: { label: string; href: string }[];
}

const navItems: NavItem[] = [
	{ label: 'Parents', href: '/parents' },
	{ label: 'Organizations', href: '/leaders' },
	{ label: 'Individuals', href: '/individuals' },
	{
		label: 'Methods',
		href: '/methods',
		submenu: [
			{ label: 'Network-Level', href: '/methods#network' },
			{ label: 'Device Controls', href: '/methods#devices' },
			{ label: 'Software Solutions', href: '/methods#software' }
		]
	},
	{
		label: 'Resources',
		href: '/resources',
		submenu: [
			{ label: 'Setup Guides', href: '/resources#guides' },
			{ label: 'Recommended Tools', href: '/resources#tools' },
			{ label: 'Glossary', href: '/resources#glossary' }
		]
	}
];

function isActive(href: string) {
	return currentPath === href || currentPath.startsWith(href + '/');
}
---

<header>
	<div class="container">
		<div class="header-content">
			<a href="/" class="logo">
				<span class="logo-text">Shemirat Enayim</span>
				<span class="logo-tagline">Protection for the Eyes</span>
			</a>

			<nav class="desktop-nav" aria-label="Main navigation">
				<ul>
					{navItems.map((item) => (
						<li class={item.submenu ? 'has-dropdown' : ''}>
							<a
								href={item.href}
								class:list={['nav-link', { active: isActive(item.href) }]}
								aria-current={isActive(item.href) ? 'page' : undefined}
							>
								{item.label}
								{item.submenu && (
									<svg class="chevron" width="16" height="16" viewBox="0 0 16 16" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
										<polyline points="4 6 8 10 12 6"></polyline>
									</svg>
								)}
							</a>
							{item.submenu && (
								<ul class="dropdown">
									{item.submenu.map((subitem) => (
										<li>
											<a href={subitem.href} class="dropdown-link">
												{subitem.label}
											</a>
										</li>
									))}
								</ul>
							)}
						</li>
					))}
				</ul>
			</nav>

			<div class="header-actions">
				<ThemeToggle class="header-theme-toggle" />
				<SearchBar class="header-search" />
			</div>

			<button class="mobile-menu-toggle" aria-label="Toggle menu" aria-expanded="false">
				<svg width="24" height="24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
					<line x1="3" y1="12" x2="21" y2="12"></line>
					<line x1="3" y1="6" x2="21" y2="6"></line>
					<line x1="3" y1="18" x2="21" y2="18"></line>
				</svg>
			</button>
		</div>
	</div>

	<!-- Mobile menu -->
	<nav class="mobile-nav" aria-label="Mobile navigation" hidden>
		<ul>
			{navItems.map((item) => (
				<li class={item.submenu ? 'has-dropdown' : ''}>
					<a
						href={item.href}
						class:list={['nav-link', { active: isActive(item.href) }]}
						aria-current={isActive(item.href) ? 'page' : undefined}
					>
						{item.label}
					</a>
					{item.submenu && (
						<>
							<button
								class="mobile-dropdown-toggle"
								aria-label={`Toggle ${item.label} submenu`}
								aria-expanded="false"
							>
								<svg width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2">
									<polyline points="6 8 10 12 14 8"></polyline>
								</svg>
							</button>
							<ul class="mobile-dropdown" hidden>
								{item.submenu.map((subitem) => (
									<li>
										<a href={subitem.href} class="dropdown-link">
											{subitem.label}
										</a>
									</li>
								))}
							</ul>
						</>
					)}
				</li>
			))}
		</ul>
	</nav>
</header>

<style>
	header {
		background-color: rgba(255, 255, 255, 0.8);
		backdrop-filter: blur(12px);
		-webkit-backdrop-filter: blur(12px);
		border-bottom: 1px solid rgba(229, 231, 235, 0.8);
		position: sticky;
		top: 0;
		z-index: var(--z-sticky);
		box-shadow: 0 1px 3px 0 rgba(0, 0, 0, 0.05), 0 1px 2px -1px rgba(0, 0, 0, 0.05);
		transition: all var(--transition-base);
	}

	.header-content {
		display: flex;
		align-items: center;
		justify-content: space-between;
		padding: var(--space-5) 0;
		gap: var(--space-6);
	}

	.logo {
		display: flex;
		flex-direction: column;
		text-decoration: none;
		color: var(--color-gray-900);
		transition: transform var(--transition-base), opacity var(--transition-base);
	}

	.logo:hover {
		transform: translateY(-1px);
		opacity: 0.9;
		text-decoration: none;
	}

	.logo-text {
		font-size: var(--text-xl);
		font-weight: 800;
		line-height: var(--leading-tight);
		background: linear-gradient(135deg, var(--color-primary-600) 0%, var(--color-primary-800) 100%);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
		letter-spacing: -0.01em;
	}

	.logo-tagline {
		font-size: var(--text-xs);
		color: var(--color-gray-600);
		font-style: italic;
		margin-top: 1px;
	}

	/* Desktop Navigation */
	.desktop-nav {
		display: none;
	}

	@media (min-width: 768px) {
		.desktop-nav {
			display: block;
			flex: 1;
		}
	}

	.desktop-nav > ul {
		display: flex;
		list-style: none;
		padding: 0;
		margin: 0;
		gap: var(--space-2);
		justify-content: flex-end;
	}

	.desktop-nav > ul > li {
		margin: 0;
		position: relative;
	}

	.nav-link {
		display: flex;
		align-items: center;
		gap: var(--space-1);
		padding: var(--space-2) var(--space-4);
		font-size: var(--text-base);
		font-weight: 500;
		color: var(--color-gray-700);
		text-decoration: none;
		border-radius: var(--radius-md);
		transition: all var(--transition-base);
	}

	.nav-link:hover {
		color: var(--color-primary-600);
		background-color: var(--color-primary-50);
		text-decoration: none;
	}

	.nav-link.active {
		color: var(--color-primary-600);
		background-color: var(--color-primary-100);
		font-weight: 600;
	}

	.chevron {
		transition: transform var(--transition-base);
	}

	/* Dropdown Menus - HIDDEN BY DEFAULT */
	.dropdown {
		display: none;
		position: absolute;
		top: 100%;
		left: 0;
		min-width: 200px;
		background-color: white;
		border: 1px solid var(--color-gray-200);
		border-radius: var(--radius-md);
		box-shadow: var(--shadow-lg);
		list-style: none;
		padding: var(--space-2);
		margin: var(--space-1) 0 0;
		z-index: var(--z-dropdown);
	}

	.dropdown.show {
		display: block;
		animation: slideDown 0.2s ease forwards;
	}

	@keyframes slideDown {
		from {
			opacity: 0;
			transform: translateY(-10px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	.dropdown li {
		margin: 0;
	}

	.dropdown-link {
		display: block;
		padding: var(--space-2) var(--space-3);
		color: var(--color-gray-700);
		text-decoration: none;
		border-radius: var(--radius-base);
		font-size: var(--text-sm);
		transition: all var(--transition-base);
	}

	.dropdown-link:hover {
		background-color: var(--color-primary-50);
		color: var(--color-primary-600);
		text-decoration: none;
	}

	/* Header Actions */
	.header-actions {
		display: flex;
		align-items: center;
		gap: var(--space-3);
	}

	.header-theme-toggle {
		display: none;
	}

	.header-search {
		display: none;
	}

	@media (min-width: 768px) {
		.header-theme-toggle {
			display: flex;
		}

		.header-search {
			display: block;
		}
	}

	/* Mobile Menu Toggle */
	.mobile-menu-toggle {
		display: flex;
		align-items: center;
		justify-content: center;
		padding: var(--space-2);
		background: none;
		border: none;
		color: var(--color-gray-700);
		cursor: pointer;
		border-radius: var(--radius-md);
		transition: all var(--transition-base);
	}

	.mobile-menu-toggle:hover {
		background-color: var(--color-gray-100);
		color: var(--color-primary-600);
	}

	.mobile-menu-toggle:focus-visible {
		outline: 2px solid var(--color-primary-500);
		outline-offset: 2px;
	}

	@media (min-width: 768px) {
		.mobile-menu-toggle {
			display: none;
		}
	}

	/* Mobile Navigation */
	.mobile-nav {
		display: block;
		border-top: 1px solid var(--color-gray-200);
		padding: var(--space-4) 0;
	}

	.mobile-nav[hidden] {
		display: none;
	}

	@media (min-width: 768px) {
		.mobile-nav {
			display: none !important;
		}
	}

	.mobile-nav ul {
		list-style: none;
		padding: 0;
		margin: 0;
		display: flex;
		flex-direction: column;
		gap: var(--space-1);
	}

	.mobile-nav li {
		margin: 0;
	}

	.mobile-nav .nav-link {
		padding: var(--space-3) var(--space-4);
		font-size: var(--text-lg);
	}

	.mobile-nav .has-dropdown {
		position: relative;
	}

	.mobile-dropdown-toggle {
		position: absolute;
		right: var(--space-4);
		top: 50%;
		transform: translateY(-50%);
		background: none;
		border: none;
		padding: var(--space-2);
		color: var(--color-gray-600);
		cursor: pointer;
		border-radius: var(--radius-base);
		transition: all var(--transition-base);
	}

	.mobile-dropdown-toggle:hover {
		background-color: var(--color-gray-100);
		color: var(--color-primary-600);
	}

	.mobile-dropdown-toggle svg {
		transition: transform var(--transition-base);
	}

	.mobile-dropdown-toggle[aria-expanded="true"] svg {
		transform: rotate(180deg);
	}

	.mobile-dropdown {
		list-style: none;
		padding: 0 0 0 var(--space-8);
		margin: var(--space-2) 0;
		background-color: var(--color-gray-50);
		border-radius: var(--radius-md);
	}

	.mobile-dropdown[hidden] {
		display: none !important;
	}

	.mobile-nav .mobile-dropdown {
		display: none;
	}

	.mobile-nav .mobile-dropdown:not([hidden]) {
		display: block;
	}

	.mobile-dropdown li {
		margin: 0;
	}

	.mobile-dropdown .dropdown-link {
		display: block;
		padding: var(--space-3) var(--space-4);
		color: var(--color-gray-700);
		text-decoration: none;
		font-size: var(--text-base);
		transition: all var(--transition-base);
	}

	.mobile-dropdown .dropdown-link:hover {
		background-color: var(--color-primary-50);
		color: var(--color-primary-600);
		text-decoration: none;
	}

	/* Dark Mode Support */
	[data-theme="dark"] header {
		background-color: rgba(17, 24, 39, 0.8);
		border-bottom-color: rgba(75, 85, 99, 0.8);
	}

	[data-theme="dark"] .logo-text {
		background: linear-gradient(135deg, var(--color-primary-400) 0%, var(--color-primary-600) 100%);
		-webkit-background-clip: text;
		-webkit-text-fill-color: transparent;
		background-clip: text;
	}

	[data-theme="dark"] .dropdown {
		background-color: var(--color-gray-800);
		border-color: var(--color-gray-700);
	}

	[data-theme="dark"] .mobile-dropdown {
		background-color: var(--color-gray-700);
	}
</style>

<script>
	// Desktop dropdown functionality
	function initDesktopDropdowns() {
		const dropdownItems = document.querySelectorAll('.desktop-nav .has-dropdown');

		dropdownItems.forEach((item) => {
			const link = item.querySelector('.nav-link');
			const dropdown = item.querySelector('.dropdown');

			if (!link || !dropdown) return;

			// Click to toggle
			link.addEventListener('click', (e) => {
				e.preventDefault();

				// Close all other dropdowns
				document.querySelectorAll('.dropdown.show').forEach((dd) => {
					if (dd !== dropdown) {
						dd.classList.remove('show');
					}
				});

				// Toggle this dropdown
				dropdown.classList.toggle('show');
			});
		});

		// Close dropdowns when clicking outside
		document.addEventListener('click', (e) => {
			const target = e.target as HTMLElement;
			if (!target.closest('.has-dropdown')) {
				document.querySelectorAll('.dropdown.show').forEach((dd) => {
					dd.classList.remove('show');
				});
			}
		});
	}

	// Mobile menu functionality
	function initMobileMenu() {
		const toggleButton = document.querySelector('.mobile-menu-toggle');
		const mobileNav = document.querySelector('.mobile-nav');

		if (toggleButton && mobileNav) {
			toggleButton.addEventListener('click', () => {
				const isExpanded = toggleButton.getAttribute('aria-expanded') === 'true';
				toggleButton.setAttribute('aria-expanded', String(!isExpanded));
				mobileNav.hidden = isExpanded;
			});
		}

		// Mobile dropdown toggles
		const dropdownToggles = document.querySelectorAll('.mobile-dropdown-toggle');
		dropdownToggles.forEach((toggle) => {
			toggle.addEventListener('click', () => {
				const isExpanded = toggle.getAttribute('aria-expanded') === 'true';
				toggle.setAttribute('aria-expanded', String(!isExpanded));

				const dropdown = toggle.nextElementSibling as HTMLElement;
				if (dropdown && dropdown.classList.contains('mobile-dropdown')) {
					dropdown.hidden = isExpanded;
				}
			});
		});
	}

	// Initialize on page load
	document.addEventListener('DOMContentLoaded', () => {
		initDesktopDropdowns();
		initMobileMenu();
	});

	// Re-initialize on navigation (for SPA-like behavior)
	document.addEventListener('astro:page-load', () => {
		initDesktopDropdowns();
		initMobileMenu();
	});
</script>
