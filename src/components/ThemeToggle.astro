---
interface Props {
	class?: string;
}

const { class: className = '' } = Astro.props;
---

<div class:list={['theme-toggle', className]} data-theme-toggle>
	<button
		type="button"
		class="theme-button"
		data-theme="light"
		aria-label="Light theme"
		title="Light theme"
	>
		<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
			<circle cx="12" cy="12" r="5"></circle>
			<line x1="12" y1="1" x2="12" y2="3"></line>
			<line x1="12" y1="21" x2="12" y2="23"></line>
			<line x1="4.22" y1="4.22" x2="5.64" y2="5.64"></line>
			<line x1="18.36" y1="18.36" x2="19.78" y2="19.78"></line>
			<line x1="1" y1="12" x2="3" y2="12"></line>
			<line x1="21" y1="12" x2="23" y2="12"></line>
			<line x1="4.22" y1="19.78" x2="5.64" y2="18.36"></line>
			<line x1="18.36" y1="5.64" x2="19.78" y2="4.22"></line>
		</svg>
	</button>
	<button
		type="button"
		class="theme-button"
		data-theme="dark"
		aria-label="Dark theme"
		title="Dark theme"
	>
		<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
			<path d="M21 12.79A9 9 0 1 1 11.21 3 7 7 0 0 0 21 12.79z"></path>
		</svg>
	</button>
	<button
		type="button"
		class="theme-button"
		data-theme="system"
		aria-label="System theme"
		title="System theme"
	>
		<svg width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
			<rect x="2" y="3" width="20" height="14" rx="2" ry="2"></rect>
			<line x1="8" y1="21" x2="16" y2="21"></line>
			<line x1="12" y1="17" x2="12" y2="21"></line>
		</svg>
	</button>
</div>

<script>
	// Theme management with light/dark/system support
	const THEME_KEY = 'shemirat-enayim-theme';
	const THEME_ATTR = 'data-theme';

	type Theme = 'light' | 'dark' | 'system';

	function getStoredTheme(): Theme | null {
		try {
			const stored = localStorage.getItem(THEME_KEY);
			if (stored === 'light' || stored === 'dark' || stored === 'system') {
				return stored;
			}
			return null;
		} catch {
			return null;
		}
	}

	function setStoredTheme(theme: Theme): void {
		try {
			localStorage.setItem(THEME_KEY, theme);
		} catch {
			// localStorage not available
		}
	}

	function getSystemTheme(): 'light' | 'dark' {
		if (typeof window !== 'undefined' && window.matchMedia) {
			return window.matchMedia('(prefers-color-scheme: dark)').matches ? 'dark' : 'light';
		}
		return 'light';
	}

	function applyTheme(theme: Theme): void {
		const effectiveTheme = theme === 'system' ? getSystemTheme() : theme;
		document.documentElement.setAttribute(THEME_ATTR, effectiveTheme);

		// Update active button state
		document.querySelectorAll('[data-theme-toggle] .theme-button').forEach((button) => {
			const btnTheme = button.getAttribute('data-theme');
			if (btnTheme === theme) {
				button.classList.add('active');
			} else {
				button.classList.remove('active');
			}
		});
	}

	function initTheme(): void {
		const storedTheme = getStoredTheme();
		const initialTheme = storedTheme || 'system';
		applyTheme(initialTheme);
	}

	function setupThemeButtons(): void {
		document.querySelectorAll('[data-theme-toggle] .theme-button').forEach((button) => {
			button.addEventListener('click', () => {
				const theme = button.getAttribute('data-theme') as Theme;
				if (theme) {
					applyTheme(theme);
					setStoredTheme(theme);
				}
			});
		});
	}

	// Listen for system theme changes when in system mode
	function watchSystemTheme(): void {
		if (typeof window !== 'undefined' && window.matchMedia) {
			const mediaQuery = window.matchMedia('(prefers-color-scheme: dark)');
			mediaQuery.addEventListener('change', () => {
				const currentTheme = getStoredTheme() || 'system';
				if (currentTheme === 'system') {
					applyTheme('system');
				}
			});
		}
	}

	// Initialize on page load
	document.addEventListener('DOMContentLoaded', () => {
		initTheme();
		setupThemeButtons();
		watchSystemTheme();
	});

	// Re-initialize on Astro navigation
	document.addEventListener('astro:page-load', () => {
		initTheme();
		setupThemeButtons();
	});
</script>

<style>
	.theme-toggle {
		display: flex;
		align-items: center;
		gap: var(--space-1);
		padding: var(--space-1);
		background: var(--color-gray-100);
		border-radius: var(--radius-lg);
	}

	.theme-button {
		display: flex;
		align-items: center;
		justify-content: center;
		padding: var(--space-2);
		background: transparent;
		border: none;
		border-radius: var(--radius-md);
		cursor: pointer;
		color: var(--color-gray-600);
		transition: all var(--transition-base);
	}

	.theme-button:hover {
		background: var(--color-gray-200);
		color: var(--color-gray-900);
	}

	.theme-button.active {
		background: white;
		color: var(--color-primary-600);
		box-shadow: var(--shadow-sm);
	}

	.theme-button:focus-visible {
		outline: 2px solid var(--color-primary-500);
		outline-offset: 2px;
	}

	.theme-button svg {
		display: block;
	}

	/* Dark theme adjustments */
	:global([data-theme="dark"]) .theme-toggle {
		background: var(--color-gray-800);
	}

	:global([data-theme="dark"]) .theme-button {
		color: var(--color-gray-400);
	}

	:global([data-theme="dark"]) .theme-button:hover {
		background: var(--color-gray-700);
		color: var(--color-gray-100);
	}

	:global([data-theme="dark"]) .theme-button.active {
		background: var(--color-gray-900);
		color: var(--color-primary-400);
	}
</style>
