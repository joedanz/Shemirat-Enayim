---
interface Props {
	href?: string;
	variant?: 'primary' | 'secondary' | 'outline';
	size?: 'small' | 'medium' | 'large';
	class?: string;
	trackEvent?: string;
	trackLocation?: string;
	trackType?: string;
}

const {
	href,
	variant = 'primary',
	size = 'medium',
	class: className = '',
	trackEvent,
	trackLocation,
	trackType
} = Astro.props;

const Tag = href ? 'a' : 'button';

// Map variant to Tailwind classes
const variantClasses = {
	primary: 'bg-primary-600 text-white border-primary-600 hover:bg-primary-700 hover:border-primary-700 dark:bg-primary-600 dark:hover:bg-primary-700',
	secondary: 'bg-secondary-600 text-white border-secondary-600 hover:bg-secondary-700 hover:border-secondary-700 dark:bg-secondary-600 dark:hover:bg-secondary-700',
	outline: 'bg-transparent text-primary-600 dark:text-primary-400 border-primary-600 dark:border-primary-400 hover:bg-primary-50 dark:hover:bg-primary-900/20 hover:text-primary-700 dark:hover:text-primary-300 hover:border-primary-700 dark:hover:border-primary-300'
};

// Map size to Tailwind classes
const sizeClasses = {
	small: 'text-sm px-4 py-2 gap-2',
	medium: 'text-base px-6 py-3 gap-2',
	large: 'text-lg px-8 py-4 gap-3'
};
---

<Tag
	href={href}
	class:list={[
		'inline-flex items-center justify-center font-semibold no-underline border-2 rounded-lg cursor-pointer transition-all',
		'focus-visible:outline-2 focus-visible:outline-primary-500 focus-visible:outline-offset-2',
		'hover:no-underline hover:-translate-y-0.5 hover:shadow-md',
		'active:translate-y-0 active:shadow-sm',
		'disabled:opacity-50 disabled:cursor-not-allowed disabled:transform-none',
		variantClasses[variant],
		sizeClasses[size],
		className
	]}
	data-track-event={trackEvent}
	data-track-location={trackLocation}
	data-track-type={trackType}
>
	<slot />
</Tag>

{(trackEvent || trackLocation || trackType) && (
	<script>
		import { trackCTAClick } from '../utils/analytics';

		document.querySelectorAll('[data-track-event]').forEach(button => {
			button.addEventListener('click', function() {
				const eventName = this.getAttribute('data-track-event');
				const location = this.getAttribute('data-track-location');
				const type = this.getAttribute('data-track-type');
				const text = this.textContent?.trim() || '';

				if (eventName) {
					trackCTAClick(text, location || 'unknown', type || undefined);
				}
			});
		});
	</script>
)}
