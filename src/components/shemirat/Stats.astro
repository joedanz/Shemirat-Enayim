---
/**
 * Stats Component - Shemirat Enayim
 * Tailwind CSS version with animated stat cards
 * Features: Responsive grid, optional icons, staggered animations
 */

interface Stat {
	value: string;
	label: string;
	icon?: string;
}

interface Props {
	stats: Stat[];
	class?: string;
}

const { stats, class: className = '' } = Astro.props;
---

<section class:list={['py-16 bg-white dark:bg-gray-900 border-t border-b border-gray-200 dark:border-gray-700', className]}>
	<div class="container mx-auto px-4 sm:px-6 lg:px-8">
		<div class="grid grid-cols-1 sm:grid-cols-2 lg:grid-cols-4 gap-8">
			{stats.map((stat, index) => (
				<div
					class="text-center p-6 opacity-0 translate-y-5 animate-fade-in-up"
					style={`animation-delay: ${(index + 1) * 0.1}s; animation-fill-mode: forwards;`}
				>
					{stat.icon && (
						<div class="text-5xl mb-3 leading-none" aria-hidden="true">
							{stat.icon}
						</div>
					)}
					<div class="text-5xl md:text-6xl font-extrabold text-brand-600 dark:text-brand-400 leading-none mb-2 min-h-[3rem] md:min-h-[3.75rem]">
						{stat.value}
					</div>
					<div class="text-lg text-gray-700 dark:text-gray-300 font-medium">
						{stat.label}
					</div>
				</div>
			))}
		</div>
	</div>
</section>

<style>
	@media (prefers-reduced-motion: no-preference) {
		@keyframes fadeInUp {
			to {
				opacity: 1;
				transform: translateY(0);
			}
		}

		.animate-fade-in-up {
			animation: fadeInUp 0.6s ease-out;
		}
	}

	@media (prefers-reduced-motion: reduce) {
		.animate-fade-in-up {
			opacity: 1;
			transform: none;
		}
	}
</style>
