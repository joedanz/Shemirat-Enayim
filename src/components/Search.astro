---
interface Props {
  class?: string;
}

const { class: className = '' } = Astro.props;
---

<div class:list={['search-container', className]}>
  <button id="search-button" class="search-button" aria-label="Open search" aria-expanded="false">
    <svg
      xmlns="http://www.w3.org/2000/svg"
      width="20"
      height="20"
      viewBox="0 0 24 24"
      fill="none"
      stroke="currentColor"
      stroke-width="2"
      stroke-linecap="round"
      stroke-linejoin="round"
    >
      <circle cx="11" cy="11" r="8"></circle>
      <path d="m21 21-4.35-4.35"></path>
    </svg>
    <span class="search-text">Search</span>
  </button>

  <dialog id="search-modal" class="search-modal">
    <div class="search-modal-content">
      <div class="search-header">
        <h2 class="search-title">Search</h2>
        <button id="search-close" class="search-close" aria-label="Close search">
          <svg
            xmlns="http://www.w3.org/2000/svg"
            width="24"
            height="24"
            viewBox="0 0 24 24"
            fill="none"
            stroke="currentColor"
            stroke-width="2"
            stroke-linecap="round"
            stroke-linejoin="round"
          >
            <line x1="18" y1="6" x2="6" y2="18"></line>
            <line x1="6" y1="6" x2="18" y2="18"></line>
          </svg>
        </button>
      </div>
      <div id="pagefind-search"></div>
    </div>
  </dialog>
</div>

<style>
  .search-container {
    position: relative;
  }

  .search-button {
    display: flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background: transparent;
    border: 1px solid var(--color-gray-300);
    border-radius: var(--radius-lg);
    color: var(--color-gray-700);
    cursor: pointer;
    transition: all var(--transition-base);
    font-size: var(--text-sm);
  }

  .dark .search-button {
    border-color: var(--color-gray-700);
    color: var(--color-gray-300);
  }

  .search-button:hover {
    border-color: var(--color-primary-500);
    color: var(--color-primary-600);
  }

  .dark .search-button:hover {
    border-color: var(--color-primary-500);
    color: var(--color-primary-400);
  }

  .search-text {
    display: none;
  }

  @media (min-width: 640px) {
    .search-text {
      display: inline;
    }
  }

  .search-modal {
    position: fixed;
    inset: 0;
    background: transparent;
    border: none;
    padding: 0;
    z-index: 9999;
    align-items: flex-start;
    justify-content: center;
    padding-top: 4rem;
  }

  .search-modal[open] {
    display: flex;
  }

  .search-modal::backdrop {
    background: rgba(0, 0, 0, 0.75);
  }

  :global(.dark) .search-modal::backdrop {
    background: rgba(0, 0, 0, 0.85);
  }

  .search-modal-content {
    position: relative;
    background: white;
    max-width: 42rem;
    width: 90%;
    border-radius: var(--radius-2xl);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.25);
    max-height: calc(100vh - 8rem);
    display: flex;
    flex-direction: column;
  }

  :global(.dark) .search-modal-content {
    background: rgb(31 41 55);
    box-shadow: 0 25px 50px -12px rgba(0, 0, 0, 0.5);
  }

  .search-header {
    display: flex;
    justify-content: space-between;
    align-items: center;
    padding: 1.5rem;
    border-bottom: 1px solid rgb(229 231 235);
  }

  :global(.dark) .search-header {
    border-bottom-color: rgb(55 65 81);
  }

  .search-title {
    font-size: var(--text-xl);
    font-weight: 600;
    margin: 0;
    color: rgb(17 24 39);
  }

  :global(.dark) .search-title {
    color: rgb(243 244 246);
  }

  .search-close {
    background: transparent;
    border: none;
    cursor: pointer;
    color: rgb(107 114 128);
    transition: color var(--transition-base);
    padding: 0.25rem;
    display: flex;
    align-items: center;
    justify-content: center;
  }

  .search-close:hover {
    color: rgb(17 24 39);
  }

  :global(.dark) .search-close {
    color: rgb(156 163 175);
  }

  :global(.dark) .search-close:hover {
    color: rgb(243 244 246);
  }

  #pagefind-search {
    padding: 1.5rem;
    overflow-y: auto;
  }

  /* Pagefind UI customization */
  :global(.pagefind-ui) {
    --pagefind-ui-scale: 1;
    --pagefind-ui-primary: var(--color-primary-600);
    --pagefind-ui-text: var(--color-gray-900);
    --pagefind-ui-background: white;
    --pagefind-ui-border: var(--color-gray-200);
    --pagefind-ui-tag: var(--color-gray-100);
  }

  :global(.dark .pagefind-ui) {
    --pagefind-ui-primary: var(--color-primary-400);
    --pagefind-ui-text: rgb(243 244 246);
    --pagefind-ui-background: rgb(31 41 55);
    --pagefind-ui-border: var(--color-gray-700);
    --pagefind-ui-tag: var(--color-gray-800);
  }

  :global(.pagefind-ui__search-input) {
    background: var(--pagefind-ui-background) !important;
    color: var(--pagefind-ui-text) !important;
    border-color: var(--pagefind-ui-border) !important;
  }

  :global(.pagefind-ui__result) {
    background: var(--pagefind-ui-background) !important;
    border-color: var(--pagefind-ui-border) !important;
  }

  :global(.pagefind-ui__result:hover) {
    background: var(--pagefind-ui-tag) !important;
  }

  :global(.pagefind-ui__result-title) {
    color: var(--pagefind-ui-text) !important;
  }

  :global(.pagefind-ui__result-excerpt) {
    color: var(--color-gray-600) !important;
  }

  :global(.dark .pagefind-ui__result-excerpt) {
    color: var(--color-gray-400) !important;
  }
</style>

<script>
  // Wait for DOM to be ready
  document.addEventListener('DOMContentLoaded', function () {
    const searchButton = document.getElementById('search-button');
    const searchModal = document.getElementById('search-modal');
    const searchClose = document.getElementById('search-close');

    let pagefindLoaded = false;

    async function loadPagefind() {
      if (pagefindLoaded) return;

      try {
        // Check if pagefind exists (only in production builds)
        const response = await fetch('/pagefind/pagefind.js', { method: 'HEAD' });
        if (!response.ok) {
          throw new Error('Pagefind not available');
        }

        // Dynamically import Pagefind at runtime (only available after build)
        // Use string concatenation to prevent Vite from analyzing this import
        const pagefindPath = '/pagefind' + '/pagefind.js';
        const pagefind = await import(pagefindPath);
        await pagefind.options({
          excerptLength: 15,
        });

        // Create UI manually since @pagefind/default-ui requires CSS
        const container = document.getElementById('pagefind-search');
        if (!container) return;

        // Create search input
        const input = document.createElement('input');
        input.type = 'text';
        input.placeholder = 'Search...';
        input.className =
          'pagefind-ui__search-input w-full px-4 py-3 border border-gray-300 dark:border-gray-700 rounded-lg bg-white dark:bg-gray-800 text-gray-900 dark:text-gray-100 focus:outline-none focus:ring-2 focus:ring-primary-500';

        const resultsDiv = document.createElement('div');
        resultsDiv.className = 'pagefind-ui__results mt-4 space-y-2';

        container.appendChild(input);
        container.appendChild(resultsDiv);

        // Handle search
        let debounceTimer: number;
        input.addEventListener('input', async (e) => {
          clearTimeout(debounceTimer);
          const query = (e.target as HTMLInputElement).value;

          if (!query) {
            resultsDiv.innerHTML = '';
            return;
          }

          debounceTimer = window.setTimeout(async () => {
            const search = await pagefind.search(query);
            resultsDiv.innerHTML = '';

            if (search.results.length === 0) {
              resultsDiv.innerHTML = '<p class="text-gray-500 dark:text-gray-400 py-4">No results found</p>';
              return;
            }

            for (const result of search.results.slice(0, 10)) {
              const data = await result.data();

              const resultEl = document.createElement('a');
              resultEl.href = data.url;
              resultEl.className =
                'pagefind-ui__result block p-4 bg-white dark:bg-gray-800 border border-gray-200 dark:border-gray-700 rounded-lg hover:border-primary-500 dark:hover:border-primary-500 transition-colors no-underline';

              const title = document.createElement('div');
              title.className = 'pagefind-ui__result-title text-lg font-semibold text-gray-900 dark:text-gray-100 mb-1';
              title.textContent = data.meta?.title || 'Untitled';

              const excerpt = document.createElement('div');
              excerpt.className = 'pagefind-ui__result-excerpt text-sm text-gray-600 dark:text-gray-400';
              excerpt.innerHTML = data.excerpt || '';

              resultEl.appendChild(title);
              resultEl.appendChild(excerpt);
              resultsDiv.appendChild(resultEl);
            }
          }, 300);
        });

        pagefindLoaded = true;
      } catch (error) {
        console.error('Failed to load Pagefind:', error);
        const container = document.getElementById('pagefind-search');
        if (container) {
          container.innerHTML =
            '<p class="text-gray-500 dark:text-gray-400 py-4">Search is only available in production builds. Run <code class="bg-gray-100 dark:bg-gray-800 px-2 py-1 rounded">npm run build && npm run preview</code> to test.</p>';
        }
      }
    }

    searchButton?.addEventListener('click', async () => {
      searchModal?.showModal();
      searchButton?.setAttribute('aria-expanded', 'true');
      await loadPagefind();
      // Focus the search input
      setTimeout(() => {
        const input = document.querySelector('.pagefind-ui__search-input') as HTMLInputElement;
        input?.focus();
      }, 100);
    });

    searchClose?.addEventListener('click', () => {
      searchModal?.close();
      searchButton?.setAttribute('aria-expanded', 'false');
    });

    // Close on escape key
    searchModal?.addEventListener('keydown', (e) => {
      if (e.key === 'Escape') {
        searchModal?.close();
        searchButton?.setAttribute('aria-expanded', 'false');
      }
    });

    // Close when clicking backdrop
    searchModal?.addEventListener('click', (e) => {
      if (e.target === searchModal) {
        searchModal?.close();
        searchButton?.setAttribute('aria-expanded', 'false');
      }
    });

    // Keyboard shortcut: Cmd/Ctrl + K
    document.addEventListener('keydown', async (e) => {
      if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
        e.preventDefault();
        searchModal?.showModal();
        searchButton?.setAttribute('aria-expanded', 'true');
        await loadPagefind();
        setTimeout(() => {
          const input = document.querySelector('.pagefind-ui__search-input') as HTMLInputElement;
          input?.focus();
        }, 100);
      }
    });
  });
</script>
