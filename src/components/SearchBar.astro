---
interface Props {
	class?: string;
}

const { class: className = '' } = Astro.props;
---

<div class:list={['search-bar', className]}>
	<button
		class="search-trigger"
		type="button"
		aria-label="Open search"
		data-search-trigger
	>
		<svg class="search-icon" width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
			<circle cx="8.5" cy="8.5" r="5.5"></circle>
			<line x1="12.5" y1="12.5" x2="16" y2="16"></line>
		</svg>
		<span class="search-label">Search</span>
		<kbd class="search-shortcut">
			<span class="search-shortcut-key">⌘</span>
			<span class="search-shortcut-key">K</span>
		</kbd>
	</button>
</div>

<!-- Search Modal -->
<div class="search-modal" data-search-modal>
	<div class="search-modal-backdrop" data-search-close></div>
	<div class="search-modal-content">
		<div class="search-modal-header">
			<svg class="search-modal-icon" width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
				<circle cx="8.5" cy="8.5" r="5.5"></circle>
				<line x1="12.5" y1="12.5" x2="16" y2="16"></line>
			</svg>
			<input
				type="text"
				class="search-input"
				placeholder="Search guides, FAQs, and resources..."
				aria-label="Search"
				data-search-input
			/>
			<button
				class="search-close"
				type="button"
				aria-label="Close search"
				data-search-close
			>
				<svg width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round">
					<line x1="5" y1="5" x2="15" y2="15"></line>
					<line x1="15" y1="5" x2="5" y2="15"></line>
				</svg>
			</button>
		</div>

		<div class="search-results" data-search-results>
			<div class="search-empty">
				<p>Start typing to search...</p>
			</div>
		</div>

		<div class="search-footer">
			<div class="search-footer-hint">
				<kbd>↑</kbd><kbd>↓</kbd> to navigate
				<kbd>↵</kbd> to select
				<kbd>ESC</kbd> to close
			</div>
		</div>
	</div>
</div>

<style>
	.search-bar {
		position: relative;
	}

	.search-trigger {
		display: flex;
		align-items: center;
		gap: var(--space-2);
		padding: var(--space-2) var(--space-3);
		background-color: var(--color-white);
		border: 1px solid var(--color-gray-300);
		border-radius: var(--radius-lg);
		color: var(--color-gray-600);
		cursor: pointer;
		transition: all var(--transition-base);
		font-size: var(--text-sm);
		min-width: 200px;
	}

	.search-trigger:hover {
		border-color: var(--color-primary-500);
		background-color: var(--color-gray-50);
		color: var(--color-gray-900);
	}

	.search-trigger:focus-visible {
		outline: 2px solid var(--color-primary-500);
		outline-offset: 2px;
	}

	.search-icon {
		color: var(--color-gray-500);
	}

	.search-label {
		flex: 1;
		text-align: left;
	}

	.search-shortcut {
		display: flex;
		gap: var(--space-1);
	}

	.search-shortcut-key {
		padding: 0.125rem 0.375rem;
		background-color: var(--color-gray-100);
		border: 1px solid var(--color-gray-300);
		border-radius: var(--radius-sm);
		font-size: var(--text-xs);
		font-family: sans-serif;
		line-height: 1;
	}

	/* Modal */
	.search-modal {
		position: fixed;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		z-index: 9999;
		display: none;
		align-items: flex-start;
		justify-content: center;
		padding: var(--space-20) var(--space-4);
		animation: fadeIn 0.2s ease-out;
	}

	.search-modal[data-open="true"] {
		display: flex;
	}

	.search-modal-backdrop {
		position: absolute;
		top: 0;
		left: 0;
		right: 0;
		bottom: 0;
		background-color: rgba(0, 0, 0, 0.6);
		backdrop-filter: blur(4px);
	}

	.search-modal-content {
		position: relative;
		width: 100%;
		max-width: 640px;
		background-color: var(--color-white);
		border-radius: var(--radius-xl);
		box-shadow: var(--shadow-2xl);
		overflow: hidden;
		animation: slideDown 0.2s ease-out;
	}

	.search-modal-header {
		display: flex;
		align-items: center;
		gap: var(--space-3);
		padding: var(--space-4);
		border-bottom: 1px solid var(--color-gray-200);
	}

	.search-modal-icon {
		color: var(--color-gray-500);
		flex-shrink: 0;
	}

	.search-input {
		flex: 1;
		border: none;
		background: none;
		font-size: var(--text-lg);
		color: var(--color-gray-900);
		outline: none;
	}

	.search-input::placeholder {
		color: var(--color-gray-400);
	}

	.search-close {
		flex-shrink: 0;
		padding: var(--space-2);
		background: none;
		border: none;
		color: var(--color-gray-500);
		cursor: pointer;
		border-radius: var(--radius-base);
		transition: all var(--transition-base);
	}

	.search-close:hover {
		background-color: var(--color-gray-100);
		color: var(--color-gray-900);
	}

	.search-results {
		max-height: 400px;
		overflow-y: auto;
	}

	.search-empty {
		padding: var(--space-10) var(--space-4);
		text-align: center;
		color: var(--color-gray-500);
	}

	.search-loading {
		padding: var(--space-8) var(--space-4);
		text-align: center;
		color: var(--color-gray-500);
	}

	.search-no-results {
		padding: var(--space-8) var(--space-4);
		text-align: center;
		color: var(--color-gray-500);
	}

	.search-result-item {
		display: block;
		padding: var(--space-4);
		border-bottom: 1px solid var(--color-gray-100);
		text-decoration: none;
		transition: all var(--transition-base);
	}

	.search-result-item:hover,
	.search-result-item[data-selected="true"] {
		background-color: var(--color-primary-50);
	}

	.search-result-title {
		font-size: var(--text-base);
		font-weight: 600;
		color: var(--color-gray-900);
		margin-bottom: var(--space-1);
	}

	.search-result-description {
		font-size: var(--text-sm);
		color: var(--color-gray-600);
		line-height: var(--leading-snug);
		margin-bottom: var(--space-1);
	}

	.search-result-path {
		font-size: var(--text-xs);
		color: var(--color-primary-600);
	}

	.search-footer {
		padding: var(--space-3) var(--space-4);
		border-top: 1px solid var(--color-gray-200);
		background-color: var(--color-gray-50);
	}

	.search-footer-hint {
		display: flex;
		gap: var(--space-4);
		font-size: var(--text-xs);
		color: var(--color-gray-600);
		align-items: center;
	}

	.search-footer-hint kbd {
		padding: 0.125rem 0.375rem;
		background-color: var(--color-white);
		border: 1px solid var(--color-gray-300);
		border-radius: var(--radius-sm);
		font-family: sans-serif;
		font-size: var(--text-xs);
	}

	@keyframes fadeIn {
		from {
			opacity: 0;
		}
		to {
			opacity: 1;
		}
	}

	@keyframes slideDown {
		from {
			opacity: 0;
			transform: translateY(-20px);
		}
		to {
			opacity: 1;
			transform: translateY(0);
		}
	}

	@media (max-width: 768px) {
		.search-trigger {
			min-width: auto;
		}

		.search-label {
			display: none;
		}

		.search-shortcut {
			display: none;
		}

		.search-modal {
			padding: var(--space-4);
		}

		.search-results {
			max-height: 60vh;
		}
	}
</style>

<script>
	import Fuse from 'fuse.js';

	// Search data will be fetched from JSON file
	let fuse: Fuse<any> | null = null;
	let searchData: any[] = [];

	// DOM elements
	const modal = document.querySelector('[data-search-modal]') as HTMLElement;
	const trigger = document.querySelector('[data-search-trigger]') as HTMLButtonElement;
	const input = document.querySelector('[data-search-input]') as HTMLInputElement;
	const results = document.querySelector('[data-search-results]') as HTMLElement;
	const closeButtons = document.querySelectorAll('[data-search-close]');

	let selectedIndex = -1;

	// Initialize search data
	async function initSearch() {
		try {
			// Create search data from pages we know exist
			searchData = [
				// Main pages
				{ title: 'Home', description: 'Comprehensive resources for protecting your family online', path: '/', category: 'Main' },
				{ title: 'For Parents', description: 'Protect your children with comprehensive filtering and monitoring solutions', path: '/parents', category: 'Main' },
				{ title: 'For Leaders', description: 'Institutional filtering solutions for religious and community organizations', path: '/leaders', category: 'Main' },
				{ title: 'For Individuals', description: 'Personal accountability and filtering for self-protection', path: '/individuals', category: 'Main' },
				{ title: 'Protection Methods', description: 'Comprehensive catalog of filtering and protection solutions', path: '/methods', category: 'Main' },
				{ title: 'Resources', description: 'Tools library, glossary, and external resources', path: '/resources', category: 'Main' },
				{ title: 'FAQ', description: 'Frequently asked questions about internet filtering and online safety', path: '/faq', category: 'Support' },
				{ title: 'About Us', description: 'Our mission to protect families online', path: '/about', category: 'Main' },
				{ title: 'Contact', description: 'Get in touch with our team', path: '/contact', category: 'Main' },

				// Protection method guides
				{ title: 'DNS Filtering Setup', description: 'Configure DNS-based content filtering with OpenDNS, CleanBrowsing, and more', path: '/guides/dns-filtering', category: 'Guides' },
				{ title: 'Router Configuration', description: 'Set up parental controls on your router', path: '/guides/router-config', category: 'Guides' },
				{ title: 'Firewall Setup', description: 'Advanced pfSense and OPNsense filtering', path: '/guides/firewall', category: 'Guides' },
				{ title: 'Guest Networks', description: 'Create separate WiFi networks with different filtering levels', path: '/guides/guest-networks', category: 'Guides' },
				{ title: 'iOS Screen Time', description: 'Complete iPhone and iPad parental controls setup', path: '/guides/ios-screen-time', category: 'Guides' },
				{ title: 'Android Family Link', description: 'Google Family Link configuration and management', path: '/guides/android-family-link', category: 'Guides' },
				{ title: 'Windows Family Safety', description: 'Microsoft Family Safety for Windows 10 and 11', path: '/guides/windows-family', category: 'Guides' },
				{ title: 'macOS Controls', description: 'macOS Screen Time and parental controls', path: '/guides/macos-controls', category: 'Guides' },
				{ title: 'Gaming Console Safety', description: 'PlayStation, Xbox, and Nintendo Switch parental controls', path: '/guides/gaming-consoles', category: 'Guides' },
				{ title: 'Smart TV Protection', description: 'Protect streaming devices and smart TVs', path: '/guides/smart-tv', category: 'Guides' },
				{ title: 'Filtering Software Comparison', description: 'Compare Qustodio, Net Nanny, Bark, and more', path: '/guides/filtering-software', category: 'Guides' },
				{ title: 'Accountability Apps', description: 'Covenant Eyes, Accountable2You, and Truple', path: '/guides/accountability-apps', category: 'Guides' },
				{ title: 'Browser Extensions', description: 'BlockSite, LeechBlock, StayFocusd for content blocking', path: '/guides/browser-extensions', category: 'Guides' },
				{ title: 'YouTube Filtering', description: 'YouTube Kids, Restricted Mode, and supervised accounts', path: '/guides/youtube-filtering', category: 'Guides' },
				{ title: 'Safe Search', description: 'Enable SafeSearch on Google, Bing, DuckDuckGo', path: '/guides/safe-search', category: 'Guides' },

				// Parent guides
				{ title: 'Age-Appropriate Internet', description: 'Developmental stages and device progression by age', path: '/guides/age-appropriate-internet', category: 'Parent Guides' },
				{ title: 'Social Media Safety', description: 'Platform-specific safety for Instagram, TikTok, Snapchat, Discord', path: '/guides/social-media-safety', category: 'Parent Guides' },
				{ title: 'Gaming Safety', description: 'ESRB ratings, platform controls, and voice chat safety', path: '/guides/gaming-safety', category: 'Parent Guides' },
				{ title: 'Cyberbullying Prevention', description: 'Types, warning signs, documentation, and crisis response', path: '/guides/cyberbullying', category: 'Parent Guides' },
				{ title: 'Screen Time Management', description: 'AAP recommendations and quality vs quantity framework', path: '/guides/screen-time-management', category: 'Parent Guides' },
				{ title: 'Education vs Entertainment Balance', description: '80/20 approach and age-specific recommendations', path: '/guides/education-entertainment-balance', category: 'Parent Guides' },

				// Troubleshooting
				{ title: 'Troubleshooting Overview', description: 'Common internet filtering problems and solutions', path: '/troubleshooting', category: 'Troubleshooting' },
				{ title: 'DNS Not Working', description: 'Fix DNS filtering that isnt taking effect', path: '/troubleshooting/dns-not-working', category: 'Troubleshooting' },
				{ title: 'Slow Internet After Filtering', description: 'Fix performance issues caused by filtering', path: '/troubleshooting/slow-internet', category: 'Troubleshooting' },
				{ title: 'Sites Blocked Incorrectly', description: 'Whitelist legitimate sites and adjust filter sensitivity', path: '/troubleshooting/sites-blocked-incorrectly', category: 'Troubleshooting' },
				{ title: 'Child Bypassed Filter', description: 'Close bypass methods and strengthen protection', path: '/troubleshooting/child-bypassed-filter', category: 'Troubleshooting' },
				{ title: 'Password Recovery', description: 'Recover or reset router and filtering software passwords', path: '/troubleshooting/password-recovery', category: 'Troubleshooting' }
			];

			// Initialize Fuse with options
			fuse = new Fuse(searchData, {
				keys: ['title', 'description', 'category'],
				threshold: 0.3,
				includeScore: true,
				minMatchCharLength: 2
			});
		} catch (error) {
			console.error('Failed to initialize search:', error);
		}
	}

	// Open modal
	function openModal() {
		modal.setAttribute('data-open', 'true');
		input.focus();
		document.body.style.overflow = 'hidden';
	}

	// Close modal
	function closeModal() {
		modal.setAttribute('data-open', 'false');
		input.value = '';
		results.innerHTML = '<div class="search-empty"><p>Start typing to search...</p></div>';
		selectedIndex = -1;
		document.body.style.overflow = '';
	}

	// Perform search
	function performSearch(query: string) {
		if (!fuse || query.trim().length === 0) {
			results.innerHTML = '<div class="search-empty"><p>Start typing to search...</p></div>';
			return;
		}

		const searchResults = fuse.search(query);

		if (searchResults.length === 0) {
			results.innerHTML = '<div class="search-no-results"><p>No results found for "' + query + '"</p></div>';
			return;
		}

		selectedIndex = -1;
		renderResults(searchResults);
	}

	// Render results
	function renderResults(searchResults: any[]) {
		const html = searchResults.slice(0, 10).map((result, index) => {
			const item = result.item;
			return `
				<a
					href="${item.path}"
					class="search-result-item"
					data-index="${index}"
				>
					<div class="search-result-title">${item.title}</div>
					<div class="search-result-description">${item.description}</div>
					<div class="search-result-path">${item.category} • ${item.path}</div>
				</a>
			`;
		}).join('');

		results.innerHTML = html;
	}

	// Handle keyboard navigation
	function handleKeyboardNavigation(e: KeyboardEvent) {
		const items = results.querySelectorAll('.search-result-item');

		if (e.key === 'ArrowDown') {
			e.preventDefault();
			selectedIndex = Math.min(selectedIndex + 1, items.length - 1);
			updateSelection(items);
		} else if (e.key === 'ArrowUp') {
			e.preventDefault();
			selectedIndex = Math.max(selectedIndex - 1, -1);
			updateSelection(items);
		} else if (e.key === 'Enter' && selectedIndex >= 0) {
			e.preventDefault();
			(items[selectedIndex] as HTMLAnchorElement).click();
		} else if (e.key === 'Escape') {
			e.preventDefault();
			closeModal();
		}
	}

	// Update selection visual
	function updateSelection(items: NodeListOf<Element>) {
		items.forEach((item, index) => {
			if (index === selectedIndex) {
				item.setAttribute('data-selected', 'true');
				item.scrollIntoView({ block: 'nearest' });
			} else {
				item.removeAttribute('data-selected');
			}
		});
	}

	// Event listeners
	trigger?.addEventListener('click', openModal);
	closeButtons.forEach(btn => btn.addEventListener('click', closeModal));

	input?.addEventListener('input', (e) => {
		const query = (e.target as HTMLInputElement).value;
		performSearch(query);
	});

	input?.addEventListener('keydown', handleKeyboardNavigation);

	// Keyboard shortcut (Cmd/Ctrl + K)
	document.addEventListener('keydown', (e) => {
		if ((e.metaKey || e.ctrlKey) && e.key === 'k') {
			e.preventDefault();
			if (modal.getAttribute('data-open') === 'true') {
				closeModal();
			} else {
				openModal();
			}
		}
	});

	// Initialize search on page load
	initSearch();
</script>
