---
interface Props {
	type?: 'info' | 'success' | 'warning' | 'error';
	dismissible?: boolean;
	class?: string;
}

const {
	type = 'info',
	dismissible = false,
	class: className = ''
} = Astro.props;

const icons = {
	info: 'ℹ',
	success: '✓',
	warning: '⚠',
	error: '✕'
};

const ariaRoles = {
	info: 'status',
	success: 'status',
	warning: 'alert',
	error: 'alert'
};
---

<div
	class:list={['alert', `alert-${type}`, className]}
	role={ariaRoles[type]}
	aria-live={type === 'error' || type === 'warning' ? 'assertive' : 'polite'}
>
	<div class="alert-icon" aria-hidden="true">
		{icons[type]}
	</div>
	<div class="alert-content">
		<slot />
	</div>
	{dismissible && (
		<button class="alert-dismiss" aria-label="Dismiss alert">
			<svg width="20" height="20" viewBox="0 0 20 20" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round">
				<line x1="5" y1="5" x2="15" y2="15"></line>
				<line x1="15" y1="5" x2="5" y2="15"></line>
			</svg>
		</button>
	)}
</div>

<style>
	.alert {
		display: flex;
		align-items: flex-start;
		gap: var(--space-3);
		padding: var(--space-4);
		border-radius: var(--radius-lg);
		border: 1px solid transparent;
		font-size: var(--text-base);
		line-height: var(--leading-relaxed);
	}

	.alert-icon {
		flex-shrink: 0;
		width: 24px;
		height: 24px;
		display: flex;
		align-items: center;
		justify-content: center;
		font-size: var(--text-xl);
		font-weight: 700;
	}

	.alert-content {
		flex: 1;
		min-width: 0;
	}

	.alert-content :global(p:last-child) {
		margin-bottom: 0;
	}

	.alert-dismiss {
		flex-shrink: 0;
		background: none;
		border: none;
		cursor: pointer;
		padding: var(--space-1);
		border-radius: var(--radius-base);
		color: inherit;
		opacity: 0.7;
		transition: all var(--transition-base);
	}

	.alert-dismiss:hover {
		opacity: 1;
		background-color: rgba(0, 0, 0, 0.1);
	}

	.alert-dismiss:focus-visible {
		outline: 2px solid currentColor;
		outline-offset: 2px;
		opacity: 1;
	}

	/* Info Alert */
	.alert-info {
		background-color: var(--color-primary-50);
		border-color: var(--color-primary-200);
		color: var(--color-primary-900);
	}

	.alert-info .alert-icon {
		color: var(--color-primary-600);
	}

	/* Success Alert */
	.alert-success {
		background-color: var(--color-secondary-50);
		border-color: var(--color-secondary-200);
		color: var(--color-secondary-900);
	}

	.alert-success .alert-icon {
		color: var(--color-secondary-600);
	}

	/* Warning Alert */
	.alert-warning {
		background-color: #fff7ed;
		border-color: #fed7aa;
		color: #92400e;
	}

	.alert-warning .alert-icon {
		color: var(--color-warning);
	}

	/* Error Alert */
	.alert-error {
		background-color: #fef2f2;
		border-color: #fecaca;
		color: #7f1d1d;
	}

	.alert-error .alert-icon {
		color: var(--color-error);
	}
</style>

<script>
	// Dismiss functionality
	document.addEventListener('DOMContentLoaded', () => {
		const dismissButtons = document.querySelectorAll('.alert-dismiss');

		dismissButtons.forEach((button) => {
			button.addEventListener('click', () => {
				const alert = button.closest('.alert');
				if (alert) {
					alert.style.transition = 'opacity 0.3s, transform 0.3s';
					alert.style.opacity = '0';
					alert.style.transform = 'translateY(-10px)';
					setTimeout(() => {
						alert.remove();
					}, 300);
				}
			});
		});
	});
</script>
