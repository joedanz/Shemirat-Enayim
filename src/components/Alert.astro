---
interface Props {
  type?: 'info' | 'success' | 'warning' | 'error';
  dismissible?: boolean;
  class?: string;
}

const { type = 'info', dismissible = false, class: className = '' } = Astro.props;

const icons = {
  info: 'ℹ',
  success: '✓',
  warning: '⚠',
  error: '✕',
};

const ariaRoles: Record<typeof type, 'status' | 'alert'> = {
  info: 'status',
  success: 'status',
  warning: 'alert',
  error: 'alert',
};

// Tailwind classes for each type
const typeClasses = {
  info: 'bg-blue-50 dark:bg-blue-900/30 border-blue-200 dark:border-blue-700 text-blue-900 dark:text-blue-100',
  success: 'bg-green-50 dark:bg-green-900/30 border-green-200 dark:border-green-700 text-green-900 dark:text-green-100',
  warning:
    'bg-orange-50 dark:bg-orange-900/30 border-orange-200 dark:border-orange-700 text-orange-900 dark:text-orange-100',
  error: 'bg-red-50 dark:bg-red-900/30 border-red-200 dark:border-red-700 text-red-900 dark:text-red-100',
};

const iconColorClasses = {
  info: 'text-blue-600 dark:text-blue-400',
  success: 'text-green-600 dark:text-green-400',
  warning: 'text-orange-600 dark:text-orange-400',
  error: 'text-red-600 dark:text-red-400',
};
---

<div
  class:list={['flex items-start gap-3 p-4 rounded-lg border text-base leading-relaxed', typeClasses[type], className]}
  role={ariaRoles[type]}
  aria-live={type === 'error' || type === 'warning' ? 'assertive' : 'polite'}
>
  <div
    class:list={['flex-shrink-0 w-6 h-6 flex items-center justify-center text-xl font-bold', iconColorClasses[type]]}
    aria-hidden="true"
  >
    {icons[type]}
  </div>
  <div class="flex-1 min-w-0 [&>p:last-child]:mb-0">
    <slot />
  </div>
  {
    dismissible && (
      <button
        class="flex-shrink-0 bg-transparent border-none cursor-pointer p-1 rounded opacity-70 hover:opacity-100 hover:bg-black/10 dark:hover:bg-white/10 transition-all focus-visible:outline-2 focus-visible:outline-current focus-visible:outline-offset-2 focus-visible:opacity-100"
        aria-label="Dismiss alert"
        onclick="this.closest('[role]').style.transition='opacity 0.3s, transform 0.3s'; this.closest('[role]').style.opacity='0'; this.closest('[role]').style.transform='translateY(-10px)'; setTimeout(() => this.closest('[role]').remove(), 300);"
      >
        <svg
          width="20"
          height="20"
          viewBox="0 0 20 20"
          fill="none"
          stroke="currentColor"
          stroke-width="2"
          stroke-linecap="round"
        >
          <line x1="5" y1="5" x2="15" y2="15" />
          <line x1="15" y1="5" x2="5" y2="15" />
        </svg>
      </button>
    )
  }
</div>
