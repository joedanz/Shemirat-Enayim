---
/**
 * GuideLayout - Shemirat Enayim
 * Tutorial/guide page layout with difficulty badges, prerequisites, and scroll tracking
 * Features: Step numbers, progress tracking, sticky sidebar, analytics integration
 */

import Layout from './Layout.astro';
import Header from '../components/shemirat/Header.astro';
import Footer from '../components/shemirat/Footer.astro';

interface Props {
	title: string;
	description?: string;
	difficulty?: 'beginner' | 'intermediate' | 'advanced';
	timeEstimate?: string;
	prerequisites?: string[];
	image?: string;
	// Analytics metadata
	audience?: 'parents' | 'leaders' | 'individuals' | 'general';
	category?: 'network' | 'device' | 'software' | 'education' | 'other';
}

const {
	title,
	description,
	difficulty = 'beginner',
	timeEstimate,
	prerequisites = [],
	image,
	audience = 'general',
	category = 'other'
} = Astro.props;

const currentPath = Astro.url.pathname;

const difficultyLabels = {
	beginner: 'Beginner',
	intermediate: 'Intermediate',
	advanced: 'Advanced'
};

const difficultyColors = {
	beginner: 'bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-100',
	intermediate: 'bg-yellow-100 text-yellow-800 dark:bg-yellow-900 dark:text-yellow-100',
	advanced: 'bg-red-100 text-red-800 dark:bg-red-900 dark:text-red-100'
};
---

<Layout
	title={title}
	description={description}
	image={image}
	pageType="guide"
	audience={audience}
	category={category}
>
	<Header currentPath={currentPath} />

	<main class="flex-1 py-8 md:py-12">
		<div class="container mx-auto px-4 sm:px-6 lg:px-8">
			<nav class="text-sm text-gray-600 dark:text-gray-400 mb-4" aria-label="Breadcrumb">
				<slot name="breadcrumb" />
			</nav>

			<div class="grid grid-cols-1 lg:grid-cols-[1fr_280px] gap-8 lg:gap-12">
				<article class="max-w-full">
					<header class="mb-8 pb-6 border-b-2 border-gray-200 dark:border-gray-700">
						<h1 class="mb-4">{title}</h1>

						<div class="flex flex-wrap items-center gap-3 mb-4">
							{difficulty && (
								<span class:list={[
									'inline-flex items-center px-3 py-1 text-sm font-semibold rounded-full uppercase tracking-wide',
									difficultyColors[difficulty]
								]}>
									{difficultyLabels[difficulty]}
								</span>
							)}
							{timeEstimate && (
								<span class="inline-flex items-center gap-2 text-sm text-gray-600 dark:text-gray-400">
									<svg width="16" height="16" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round">
										<circle cx="8" cy="8" r="7"></circle>
										<polyline points="8 4 8 8 10 10"></polyline>
									</svg>
									{timeEstimate}
								</span>
							)}
						</div>

						{description && (
							<p class="text-xl text-gray-700 dark:text-gray-300 leading-relaxed font-medium mb-6">
								{description}
							</p>
						)}

						{prerequisites.length > 0 && (
							<div class="bg-blue-50 dark:bg-blue-950 border border-blue-200 dark:border-blue-800 rounded-lg p-4">
								<p class="font-semibold text-blue-900 dark:text-blue-100 mb-2">
									Prerequisites:
								</p>
								<ul class="list-none pl-0 mt-2 mb-0 space-y-1">
									{prerequisites.map((prereq) => (
										<li class="text-blue-800 dark:text-blue-200 text-sm flex items-start gap-2">
											<span class="text-blue-600 dark:text-blue-400 mt-0.5">â€¢</span>
											<span>{prereq}</span>
										</li>
									))}
								</ul>
							</div>
						)}
					</header>

					<div class="guide-body max-w-prose prose prose-lg dark:prose-invert">
						<slot />
					</div>

					<footer class="mt-12 pt-8 border-t-2 border-gray-200 dark:border-gray-700">
						<slot name="next-steps" />
					</footer>
				</article>

				<aside class="hidden lg:block">
					<div class="sticky top-20">
						<slot name="sidebar" />
					</div>
				</aside>
			</div>
		</div>
	</main>

	<Footer />
</Layout>

<script>
	// Track scroll depth milestones
	let scrollMilestones = {
		25: false,
		50: false,
		75: false,
		90: false
	};

	const guideName = document.title;
	// Extract category from URL path (e.g., /guides/dns-filtering -> guides)
	const pathParts = window.location.pathname.split('/');
	const guideCategory = pathParts[1] || 'unknown';

	function handleScroll() {
		// Calculate scroll percentage
		const windowHeight = window.innerHeight;
		const documentHeight = document.documentElement.scrollHeight;
		const scrollTop = window.pageYOffset || document.documentElement.scrollTop;
		const scrollPercentage = (scrollTop / (documentHeight - windowHeight)) * 100;

		// Check and track milestones
		Object.keys(scrollMilestones).forEach((milestone) => {
			const milestoneNum = parseInt(milestone);
			if (scrollPercentage >= milestoneNum && !scrollMilestones[milestoneNum]) {
				scrollMilestones[milestoneNum] = true;

				// Track with Plausible if available
				if (typeof window.plausible === 'function') {
					window.plausible('Guide Scroll', {
						props: {
							guide: guideName,
							depth: milestoneNum,
							category: guideCategory
						}
					});
				}

				// Track guide completion at 90%
				if (milestoneNum === 90 && typeof window.plausible === 'function') {
					window.plausible('Guide Complete', {
						props: {
							guide: guideName,
							category: guideCategory
						}
					});
				}
			}
		});
	}

	// Add scroll listener with throttling
	let scrollTimeout: number;
	window.addEventListener('scroll', () => {
		if (scrollTimeout) {
			window.cancelAnimationFrame(scrollTimeout);
		}
		scrollTimeout = window.requestAnimationFrame(handleScroll);
	});

	// Initial check in case page loads already scrolled
	handleScroll();
</script>

<style>
	/* Breadcrumb styling */
	nav :global(ol) {
		display: flex;
		flex-wrap: wrap;
		align-items: center;
		gap: 0.5rem;
		list-style: none;
		padding: 0;
		margin: 0;
	}

	nav :global(li) {
		display: flex;
		align-items: center;
		gap: 0.5rem;
		margin: 0;
	}

	nav :global(li:not(:last-child)::after) {
		content: '/';
		@apply text-gray-400 dark:text-gray-600;
	}

	/* Guide body - styled step numbers */
	.guide-body :global(h2) {
		@apply mt-12 mb-4 pt-4 border-t border-gray-200 dark:border-gray-700 flex items-center gap-3;
	}

	.guide-body :global(h2:first-child) {
		@apply mt-0 pt-0 border-t-0;
	}

	.guide-body :global(h3) {
		@apply mt-8 mb-3;
	}

	.guide-body :global(img) {
		@apply max-w-full h-auto rounded-lg shadow-md border border-gray-200 dark:border-gray-700 my-6;
	}

	/* Step counter for ordered lists */
	.guide-body :global(ol) {
		counter-reset: step-counter;
		list-style: none;
		padding-left: 0;
	}

	.guide-body :global(ol > li) {
		counter-increment: step-counter;
		position: relative;
		padding-left: 2.5rem;
		margin-bottom: 1.5rem;
	}

	.guide-body :global(ol > li::before) {
		content: counter(step-counter);
		position: absolute;
		left: 0;
		top: 0;
		display: flex;
		align-items: center;
		justify-content: center;
		width: 32px;
		height: 32px;
		@apply bg-brand-600 text-white rounded-full font-bold text-sm;
	}

	:global(.dark) .guide-body :global(ol > li::before) {
		@apply bg-brand-500;
	}

	/* Sidebar styling */
	aside :global(.sidebar-section) {
		@apply bg-gray-50 dark:bg-gray-800 p-6 rounded-lg border border-gray-200 dark:border-gray-700 mb-6;
	}

	aside :global(.sidebar-section h3) {
		@apply text-lg mb-4;
	}

	aside :global(.sidebar-section ul) {
		@apply list-none p-0 m-0;
	}

	aside :global(.sidebar-section li) {
		@apply mb-2;
	}

	aside :global(.sidebar-section a) {
		@apply text-sm text-gray-700 dark:text-gray-300 no-underline transition-colors hover:text-brand-600 dark:hover:text-brand-400;
	}

	/* Print styles */
	@media print {
		aside,
		nav[aria-label="Breadcrumb"] {
			display: none;
		}

		.guide-body :global(ol > li::before) {
			print-color-adjust: exact;
			-webkit-print-color-adjust: exact;
		}
	}
</style>
